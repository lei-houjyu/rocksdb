syntax = "proto3";

option java_multiple_files = true;
option java_package = "site.ycsb";
option java_outer_classname = "Rubble";
option objc_class_prefix = "Rub";

package rubble;

service RubbleKvStoreService {
    // an internal rpc call used by the upstream (except the tail node) 
    // to synchronize states to the downstream nodes in the chain
    rpc Sync (stream SyncRequest) returns (stream SyncReply) {} 

    // perform db operations (CRUD)
    rpc DoOp(stream Op) returns (stream OpReply){}

    // used by the tail node to send the true rely to the replicator
    rpc SendReply(stream OpReply) returns (stream Reply){}

    rpc Recover(RecoverRequest) returns (Empty) {}
}

enum OpType {
    GET = 0;
    PUT = 1;
    DELETE = 2;
    UPDATE = 3;
	SCAN = 4;
}

message Op {
    bool has_edits = 1;
    int32 shard_idx = 2;
    int32 client_idx = 3;
    repeated string edits = 4;
    repeated SingleOp ops = 5;
    int64 time = 6;
    int32 id = 7;
    // repeated string status = 7;
    // repeated string value = 8;
}

message OpReply {
    string sync_reply = 1;
    int32 shard_idx = 2;
    int32 client_idx = 3;
    repeated SingleOpReply replies = 4;
    int64 time = 5;
}

message SingleOp{
    string key = 1;
    string value = 2;
    OpType type = 3;
    uint64 target_mem_id = 4;
    uint64 mem_op_cnt = 5;
    uint64 op_ptr = 6;
    uint64 reply_ptr = 7;
    int64  keynum = 8;
	int32 record_cnt = 9;
}

message SingleOpReply{
    bool ok = 1;
    string key = 2;
    string value = 3;
    string status = 4;
    int64  Id = 5;
    OpType type = 6;
    int64  keynum = 8;
	repeated string scanned_values = 9;
}

message OpReplies{
    repeated OpReply reply = 1;
}

//Reply from the replicator to the tail node, probably not needed
message Reply{
    bool ok = 1;
}

message SyncRequest {
    // a json string of args
    string args = 1;
    int32 rid = 2;
}

message SyncReply {
    string message = 1;
}

enum Action {
    REMOVE_TAIL = 0;
    INSERT_TAIL = 1;
    SYNC_TAIL = 2;
}

message RecoverRequest {
    Action action = 1;
    uint64 mem_id = 2;
}

message Empty {}